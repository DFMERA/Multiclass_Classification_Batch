// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Microsoft.ML;
using Multiclass_Classification_BatchML.Model;
using System.Runtime;

namespace Multiclass_Classification_BatchML.Model
{
    public class ConsumeModel
    {
        private static Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictionEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(CreatePredictionEngine);

        public static string MLNetModelPath = @"MLModel.zip";
       
        // For more info on consuming ML.NET models, visit https://aka.ms/mlnet-consume
        // Method for consuming model in your app
        public static ModelOutput Predict(ModelInput input)
        {
            ModelOutput result = PredictionEngine.Value.Predict(input);
            return result;
        }

        public static string PredictBatch(string dataPath)
        {
            MLContext mlContext = new MLContext();

            // Load model
            ITransformer mlModel = mlContext.Model.Load(GetAbsolutePath(MLNetModelPath), out var modelInputSchema);

            IDataView inputData = mlContext.Data.LoadFromTextFile<ModelInput>(dataPath,
                                                                            separatorChar: ',',
                                                                            hasHeader: true);

            var transformedDataView = mlModel.Transform(inputData);

            string dataPathOutput = Path.GetDirectoryName(dataPath) + @"\predictions.csv";
            using (FileStream stream = new FileStream(dataPathOutput, FileMode.Create))
            {
                mlContext.Data.SaveAsText(transformedDataView, stream,
                                                        separatorChar: ',',
                                                        headerRow: true, schema: false);
            }

            return dataPathOutput;
        }

        public static List<ModelOutput> PredictBatch(List<ModelInput> listInput)
        {
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            ITransformer mlModel = mlContext.Model.Load(GetAbsolutePath(MLNetModelPath), out var modelInputSchema);

            IDataView inputData = mlContext.Data.LoadFromEnumerable<ModelInput>(listInput, modelInputSchema);
                                                                            
            var transformedDataView = mlModel.Transform(inputData);
            var predictions = mlContext.Data.CreateEnumerable<ModelOutput>(transformedDataView, false).ToList();

            return predictions;
        }

        public static PredictionEngine<ModelInput, ModelOutput> CreatePredictionEngine()
        {
            // Create new MLContext
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            ITransformer mlModel = mlContext.Model.Load(GetAbsolutePath(MLNetModelPath), out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);

            return predEngine;
        }

        public static string GetAbsolutePath(string relativePath)
        {
            FileInfo _dataRoot = new FileInfo(typeof(ConsumeModel).Assembly.Location);
            string assemblyFolderPath = _dataRoot.Directory.FullName;

            string fullPath = Path.Combine(assemblyFolderPath, relativePath);

            return fullPath;
        }
    }
}
